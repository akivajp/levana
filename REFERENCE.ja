※ 現在テスト開発状態であるため、モジュール名・クラス名・メソッド名・関数名や、
　 引数仕様などが確定しておらず、従って当リファレンスが最新版に対応される保証はなく、
　 また今後において変更される可能性もあります。

【起動方法】

【外観】

lev : 中核ライブラリ
    - app : アプリケーション管理
    - gui : GUI管理モジュール
    - sound : サウンド再生モジュール


【appモジュール】

	[appモジュール関数]

		app = lev.app.get()
			初回呼び出し時にはアプリケーションクラスのインスタンスを作成し、セットアップしてインスタンスを返します。
			二回目以降は作成済みのインスタンスを返します。

	[appクラスメソッド] (インスタンス名を app と仮定)

        app:autoloop (main)
              ライブラリが提供するイベントループを使ってイベント処理を行い、待ちループに入ります。
            main にメインウィンドウが指定された場合、メインウィンドウ破棄と同時に関数を終了します。
            main が指定されないか nil の場合は、全てのウィンドウが破棄されると関数を終了します。
            main を指定しないと非表示のウィンドウなどがある場合に終了できなくなるので、指定することを推奨します。

        app:sleep (delay_in_msec)
            delay_in_msec ミリ秒だけ関数内で待ちます。

        app:yield()
                イベントループ内において、未処理のイベントメッセージを処理させます。
              autoloopを使用する場合は必要ありませんが、
                自前のイベントループを実装する場合は適切にyieldを呼び出してイベント処理を行う必要があります。

	[appクラスプロパティ] (インスタンス名を app と仮定)

              app.fps
                     FPSパラメータ(Frames Per Second)を決定します。
                     app:wait や app:loop と併用して同期ループを実現させます。
                        それ以外の方法でアプリケーションを実装する場合には必要となりません。

		app.interval
			app.fps と同様ですが常に、
			app.fps = 1000 / app.interval
			app.interval = 1000 / app.fps
			が成り立ちます。

		app.name
		app.title
			アプリケーション名を決定するプロパティです。代入と取得が可能です。
			デフォルト値は"Levana Application"になっています。

		app.top
		app.topwindow
			トップウィンドウを決定するプロパティです。代入と取得が可能です。
			指定しない場合はOSがウィンドウの一つをトップウィンドウとして決定します。

【guiモジュール】

	[guiモジュール関数]

		result = lev.gui.msgbox {
				message = メッセージ文字列,
				caption = キャプション文字列(省略可),
				style = 選択肢スタイル(省略可) }
			OKボタンとメッセージのみ配置されたメッセージボックスを作成します。ユーザの注意を促すのに用います。
			message は表示されるメッセージを示します。省略しないで下さい。
			caption はメッセージボックスのキャプションです。省略された場合は 'Message' が代入されます。
			style は応答用のボタンを決定する文字列です。"ok|cancel", "yes|no", "yes|no|cancel" などのように指定します。
	     
	[gui.frameクラス]

		[モジュール関数]
			frm = lev.gui.frame {
					parent = 親ウィンドウ, title = ウィンドウタイトル,
					width = 幅、height = 縦幅, x = 作成X座標, y = 作成Y座標
					style = スタイル指定文字列 }
				新規ウィンドウを作成します。非表示状態で作成されるので、
				GUIコントロールの設定後に show メソッドで表示する必要があります。
				省略された引数はデフォルト値が用いられます。
				作成失敗時には nil が返ります。
				styleに"fixed"を指定すると固定サイズウィンドウになります。

		[クラスメソッド] (インスタンス名を frm と仮定)
	　
			frm:close(force)
				ウィンドウを閉じる依頼イベントを送出します。
				force に true が指定されると強制的にウィンドウを閉じますが、
				省略された場合や false の場合は、イベントハンドラに挙動が任されます。

			frm:show(showing)
				ウィンドウの表示/非表示を切り替えます。
				showing が省略された場合はデフォルト動作として表示、true なら表示、false なら非表示になります。



【soundモジュール】

	[モジュール関数]

		lev.sound.play {file = ファイル名, ch = チャンネル番号}
			デフォルト値 ： ch = 0
			音声ファイル file を開き、チャンネル番号 ch で即時に再生を開始します。
			ch のデフォルト値 0 の時はビジーチャンネルで音声を再生し、再生終了まで関数を抜けません。
			即時に再生したくない場合や、細やかなエラーチェックを行いたい場合は、
			loadfile やクラス作成を行って下さい。

    [sound.mixerモジュール]

        [モジュール関数]
            mixer = lev.gui.mixer()
                   新規ミキサーを作成します。音楽や効果音などを同時再生したり、細やかな設定切り替えを行う場合に必要になります。
                   引数は必要としません。任意の引数を渡しても無視されます。

        [クラスメソッド] (インスタンス名を mixer と仮定)

           mixer:pause()
                   ミキサーを停止します。一切のチャンネルがミュートされますが、再生時間は流れている事に注意して下さい。

           mixer:play()
                   ミキサーを有効状態にします。各チャンネルの再生状態は個別に設定する必要があります。

        [プロパティ]

            mixer.is_playing
                    ミキサーが再生状態かどうかを真偽値で返します。真偽値を代入して状態を変更することもできます。

        [チャンネル操作]

            mixer[ch_num]
                    与えられた自然数のチャンネル番号 ch_num に対応するチャンネルを返します。
                    存在しなければ生成してから返します。
                  channel に 0 が指定された場合は未割り当てのチャンネル番号を探し出して、生成してから返します。

            mixer[ch_num]:open(filepath)
                  filepath のファイルをストリームモードで開き、ch_num 番チャンネルに割り当てます。
                    メモリを専有せず、すぐに音楽再生が可能な為、BGMのリアルタイム再生などに有効です。

            mixer[ch_num]:load(filepath)
                 filepath のファイルをメモリにロードして、ch_num 番チャンネルに割り当てます。
                    データを完全にデコードしてからロードし、メモリを専有するので再生開始まで時間を要しますが、
                    ロード後はタイムラグ無くスムーズに再生可能な為、効果音や繰り返し再生したい場合などに有効です。

            mixer[ch_num]:pause()
                 ch_num 番チャンネルを停止します。再生位置が保存されて、次回再生時には中断箇所から続行します。

            mixer[ch_num]:play()
                 ch_num 番チャンネルを再生します。停止状態から復帰する場合は、前回の中断箇所から続行します。

            mixer[ch_num]:play(filepath)
                 chu_num 番のチャンネルで filepath をストリームモードで開き、直ちに再生を開始します。

